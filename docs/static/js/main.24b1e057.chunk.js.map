{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","setConsutaform","useState","artista","cancion","datosform","setDatosform","error","setError","handleChange","target","name","value","className","onSubmit","e","preventDefault","trim","type","placeholder","onChange","Cancion","letracancion","length","Info","infoartista","Object","keys","artists","strArtistThumb","strArtist","strGenre","strBiographyES","strFacebook","strTwitter","strLastFMChart","src","alt","href","rel","App","consutaform","setLetracancion","setinfoArtista","useEffect","a","url1","url2","Promise","all","axios","letra","info","data","lyrics","consultarLetraAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.24b1e057.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({setConsutaform}) => {\r\n\r\n    //state del formulario\r\n    const [datosform, setDatosform] = useState({\r\n        artista:'',\r\n        cancion:''\r\n    })\r\n    const {artista,cancion}= datosform;\r\n\r\n    //state de Error si los datos están vacios\r\n    const [error, setError] = useState(false)\r\n\r\n    //Manejar el onchange de cada input\r\n    const handleChange = ({target}) =>{\r\n        setDatosform({\r\n            ...datosform,\r\n            [target.name]:target.value\r\n        })\r\n    }\r\n\r\n    //manejar submit del form\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        \r\n        //validar campos\r\n        if(artista.trim()==='' || cancion.trim() ===''){\r\n            setError(true)\r\n            return;\r\n        }\r\n        //Enviar datos del formulario al componente principal\r\n        setError(false)\r\n        setConsutaform(datosform)\r\n    }\r\n\r\n    return (\r\n      <div className=\"bg-info \">\r\n        \r\n        { error ? <p className=\"alert alert-danger text-center p-2\">Todos los campos son obligatorios</p>:null }\r\n        \r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <form \r\n                className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n                onSubmit={ handleSubmit }\r\n            >\r\n              <fieldset>\r\n                <legend className=\"text-center d-block mx-auto\">Buscador Letras Canciones</legend>\r\n\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-6\">\r\n                    <div className=\"form-group\">\r\n                        <label>Artista</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"artista\"\r\n                            placeholder=\"Nombre Artista\"\r\n                            onChange={handleChange}\r\n                            value={artista}    \r\n                        />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-6\">           \r\n                    <div className=\"form-group\">\r\n                        <label>Canción</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"cancion\"\r\n                            placeholder=\"Nombre de la Canción\"\r\n                            onChange={handleChange}\r\n                            value={cancion} \r\n                        />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary float-right\"\r\n                >Buscar</button>\r\n              </fieldset>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    setConsutaform: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Cancion = ( { letracancion } ) => {\r\n\r\n\r\n    if(letracancion.length === 0) return null\r\n\r\n    return (\r\n        <>\r\n            <h2>Letra de la Canción</h2>\r\n            <p className=\"letra\">{ letracancion }</p>\r\n        </>\r\n    )\r\n}\r\n\r\nCancion.propTypes = {\r\n    letracancion: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Cancion\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Info = ({infoartista}) => {\r\n\r\n    if(Object.keys(infoartista).length === 0 || infoartista.artists === null) return null\r\n    \r\n    const{strArtistThumb, strArtist, strGenre, strBiographyES, strFacebook, strTwitter, strLastFMChart}=infoartista.artists[0]\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <div className=\"card border-light\">\r\n                <div className=\"card-header bg-primary text-white font-weight-bold\">\r\n                    <h2>Información Artista</h2>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <img\r\n                        src={strArtistThumb}\r\n                        alt={strArtist}\r\n                    />\r\n                    <p className=\"card-text\">Género: {strGenre}</p>\r\n                    <p className=\"card-text\">Biografía:</p>\r\n                    <p className=\"card-text\">{strBiographyES}</p>\r\n                    <p className=\"card-text\">\r\n                        <a href={`https://${strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fab fa-facebook\"></i>\r\n                        </a>\r\n                        <a href={`https://${strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fab fa-twitter\"></i>\r\n                        </a>\r\n                        <a href={`${strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            <i className=\"fab fa-lastfm\"></i>\r\n                        </a>\r\n                    </p>\r\n\r\n\r\n                \r\n                </div>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nInfo.propTypes = {\r\n    infoartista: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Info\r\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport Formulario from './components/Formulario';\nimport Cancion from './components/Cancion';\nimport Info from './components/Info';\n\nfunction App() {\n\n  //state global con los datos de la consulta al formulario\n  const [consutaform, setConsutaform] = useState({})\n\n  const [letracancion, setLetracancion] = useState('')\n\n  const [infoartista, setinfoArtista] = useState({})\n  \n  //consultar API una vez que tengo los datos del form\n  useEffect(() => {\n    //NO deja que se ejecute al iniciar la app\n    if( Object.keys(consutaform).length === 0 ) return;\n    \n    const consultarLetraAPI= async()=>{\n      const {artista, cancion} = consutaform;\n      const url1 = `https://api.lyrics.ovh/v1/${artista}/${cancion}`\n      const url2= `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artista}`\n\n      const [letra, info] = await Promise.all([\n        axios(url1),\n        axios(url2)\n      ])\n     \n      setLetracancion(letra.data.lyrics);\n      setinfoArtista(info.data)\n    }\n    consultarLetraAPI()\n  }, [consutaform])\n\n\n  return (\n    <>\n      <Formulario\n        setConsutaform={setConsutaform}\n      />\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Info\n              infoartista={ infoartista }\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <Cancion\n              letracancion={ letracancion }\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}